import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import json
import io

from utils import (
    preprocess_text, parse_topics_field, read_uploaded_file_bytes,
    simple_flags, pos_first_token, style_suspicious_and_low,
    jaccard_tokens, bootstrap_diff_ci
)
from models import load_model_from_source, encode_texts_in_batches

st.set_page_config(page_title="Synonym Checker", layout="wide")
st.title("üîé Synonym Checker")

with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    model_source = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–¥–µ–ª–∏", ["huggingface", "google_drive"])
    model_identifier = st.text_input("ID –º–æ–¥–µ–ª–∏", value="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å..."):
            model = load_model_from_source(model_source, model_identifier)
        st.success("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (CSV, Excel, JSON)", type=["csv", "xlsx", "json", "ndjson"])

if uploaded:
    try:
        df, file_hash = read_uploaded_file_bytes(uploaded)
        st.write(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded.name}, {len(df)} —Å—Ç—Ä–æ–∫")
    except Exception as e:
        st.error(str(e))
        st.stop()

    if "text" not in df.columns or "topics" not in df.columns:
        st.error("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'text' –∏ 'topics'")
        st.stop()

    df["text_clean"] = df["text"].apply(preprocess_text)
    df["topics_list"] = df["topics"].apply(parse_topics_field)

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ö–æ–¥—Å—Ç–≤–æ"):
        if "model" not in locals():
            st.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å!")
            st.stop()
        with st.spinner("–í—ã—á–∏—Å–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏..."):
            texts = df["text_clean"].tolist()
            embeddings = encode_texts_in_batches(model, texts)
            df["embedding"] = list(embeddings)

        st.success("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã")

        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.write(df.head())

        st.download_button(
            "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)",
            data=df.to_csv(index=False).encode("utf-8"),
            file_name="result.csv",
            mime="text/csv"
        )
