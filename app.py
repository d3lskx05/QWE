import streamlit as st

# ===================== –°—Ç—Ä–∞–Ω–∏—Ü–∞ =====================
st.set_page_config(page_title="AI Analyzer", layout="wide")
st.title("üß† AI Analyzer")

# ===================== –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ =====================
mode = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
    ["–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏", "–†–∞–±–æ—Ç–∞ —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"],
    index=0
)

# ===================== –†–ï–ñ–ò–ú: –¢–ï–ö–°–¢–û–í–´–ï –ú–û–î–ï–õ–ò =====================
if mode == "–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏":
    import altair as alt
    import pandas as pd
    import numpy as np
    import json
    from typing import List

    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–≤–Ω–æ —Ç–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    from utils import (
        preprocess_text,
        parse_topics_field,
        jaccard_tokens,
        style_suspicious_and_low,
        simple_flags,
        pos_first_token,
        load_model_from_source,
        encode_texts_in_batches,
        bootstrap_diff_ci,
        _MORPH,
    )

    from sentence_transformers import util  # –Ω—É–∂–µ–Ω –¥–ª—è cos_sim

    # ===================== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ =====================
    DEFAULT_HF = "sentence-transformers/all-MiniLM-L6-v2"
    HISTORY_MAX = 500  # –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä–∞—Å—Ç–∞–ª–∞—Å—å

    st.header("üîé Synonym Checker")

    # ===================== –°–∞–π–¥–±–∞—Ä: –ú–æ–¥–µ–ª–∏ =====================
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
    model_source = st.sidebar.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–¥–µ–ª–∏", ["huggingface", "google_drive"], index=0)
    if model_source == "huggingface":
        model_id = st.sidebar.text_input("Hugging Face Model ID", value=DEFAULT_HF)
    else:
        model_id = st.sidebar.text_input("Google Drive File ID", value="1RR15OMLj9vfSrVa1HN-dRU-4LbkdbRRf")

    enable_ab_test = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å A/B —Ç–µ—Å—Ç –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π", value=False)
    if enable_ab_test:
        ab_model_source = st.sidebar.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏", ["huggingface", "google_drive"], index=0, key="ab_source")
        if ab_model_source == "huggingface":
            ab_model_id = st.sidebar.text_input("Hugging Face Model ID (B)", value="sentence-transformers/all-mpnet-base-v2", key="ab_id")
        else:
            ab_model_id = st.sidebar.text_input("Google Drive File ID (B)", value="", key="ab_id")
    else:
        ab_model_id = ""

    batch_size = st.sidebar.number_input("Batch size –¥–ª—è —ç–Ω–∫–æ–¥–∏–Ω–≥–∞", min_value=8, max_value=1024, value=64, step=8)

    # ===================== –°–∞–π–¥–±–∞—Ä: –î–µ—Ç–µ–∫—Ç–æ—Ä =====================
    st.sidebar.header("–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    enable_detector = st.sidebar.checkbox("–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä (high sem, low lex)", value=True)
    semantic_threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏ (>=)", 0.0, 1.0, 0.80, 0.01)
    lexical_threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ –ª–µ–∫—Å–∏—á–µ—Å–∫–æ–π –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ (<=)", 0.0, 1.0, 0.30, 0.01)
    low_score_threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏", 0.0, 1.0, 0.75, 0.01)

    # ===================== –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π =====================
    try:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å..."):
            model_a = load_model_from_source(model_source, model_id)
        st.sidebar.success("–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        st.sidebar.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å: {e}")
        st.stop()

    model_b = None
    if enable_ab_test:
        if ab_model_id.strip() == "":
            st.sidebar.warning("–í–≤–µ–¥–∏—Ç–µ ID –≤—Ç–æ—Ä–æ–π –º–æ–¥–µ–ª–∏")
        else:
            try:
                with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å B..."):
                    model_b = load_model_from_source(ab_model_source, ab_model_id)
                st.sidebar.success("–ú–æ–¥–µ–ª—å B –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                st.sidebar.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å B: {e}")
                st.stop()

    # ===================== –°–æ—Å—Ç–æ—è–Ω–∏—è =====================
    if "history" not in st.session_state:
        st.session_state["history"] = []
    if "suggestions" not in st.session_state:
        st.session_state["suggestions"] = []

    def add_to_history(record: dict):
        st.session_state["history"].append(record)
        # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(st.session_state["history"]) > HISTORY_MAX:
            st.session_state["history"] = st.session_state["history"][-HISTORY_MAX:]

    def clear_history():
        st.session_state["history"] = []

    def add_suggestions(phrases: List[str]):
        s = [p for p in phrases if p and isinstance(p, str)]
        for p in reversed(s):
            if p not in st.session_state["suggestions"]:
                st.session_state["suggestions"].insert(0, p)
        st.session_state["suggestions"] = st.session_state["suggestions"][:200]

    # ===================== –ò—Å—Ç–æ—Ä–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ =====================
    st.sidebar.header("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫")
    if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
        clear_history()

    if st.session_state["history"]:
        history_bytes = json.dumps(st.session_state["history"], indent=2, ensure_ascii=False).encode('utf-8')
        st.sidebar.download_button("–°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (JSON)", data=history_bytes, file_name="history.json", mime="application/json")
    else:
        st.sidebar.caption("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è")

    # ===================== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º c –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º =====================
    if "mode" not in st.session_state:
        st.session_state.mode = "–§–∞–π–ª (CSV/XLSX/JSON)"
    if "pending_mode" not in st.session_state:
        st.session_state.pending_mode = None
    if "pending_confirm" not in st.session_state:
        st.session_state.pending_confirm = False
    if "mode_ui_v" not in st.session_state:
        st.session_state.mode_ui_v = 0

    radio_key = f"mode_selector_{st.session_state.mode}_{st.session_state.mode_ui_v}"
    mode_choice = st.radio(
        "–†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏",
        ["–§–∞–π–ª (CSV/XLSX/JSON)", "–†—É—á–Ω–æ–π –≤–≤–æ–¥"],
        index=0 if st.session_state.mode == "–§–∞–π–ª (CSV/XLSX/JSON)" else 1,
        horizontal=True,
        key=radio_key
    )

    if st.session_state.pending_mode is None and mode_choice != st.session_state.mode:
        st.session_state.pending_mode = mode_choice
        st.session_state.pending_confirm = False

    if st.session_state.pending_mode:
        col_warn, col_yes, col_close = st.columns([4, 1, 0.6])
        with col_warn:
            st.warning(
                f"–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º **{st.session_state.pending_mode}**? "
                "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
            )
        with col_yes:
            if st.button("‚úÖ –î–∞"):
                if not st.session_state.pending_confirm:
                    st.session_state.pending_confirm = True
                    st.info("–ù–∞–∂–º–∏—Ç–µ ‚úÖ –µ—â—ë —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                else:
                    st.session_state.mode = st.session_state.pending_mode
                    st.session_state.pending_mode = None
                    st.session_state.pending_confirm = False
                    for k in ["uploaded_file", "manual_input"]:
                        st.session_state.pop(k, None)
                    st.rerun()
        with col_close:
            if st.button("‚ùå", help="–û—Ç–º–µ–Ω–∞"):
                st.session_state.pending_mode = None
                st.session_state.pending_confirm = False
                st.session_state.mode_ui_v += 1

    mode_text = st.session_state.mode

    # ===================== –†—É—á–Ω–æ–π –≤–≤–æ–¥ =====================
    def _set_manual_value(key: str, val: str):
        st.session_state[key] = val

    if mode_text == "–†—É—á–Ω–æ–π –≤–≤–æ–¥":
        st.header("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä —Ñ—Ä–∞–∑")
        with st.expander("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–Ω—É –ø–∞—Ä—É —Ñ—Ä–∞–∑ (–±—ã—Å—Ç—Ä–æ)"):
            if "manual_text1" not in st.session_state:
                st.session_state["manual_text1"] = ""
            if "manual_text2" not in st.session_state:
                st.session_state["manual_text2"] = ""
            text1 = st.text_input("–§—Ä–∞–∑–∞ 1", key="manual_text1")
            text2 = st.text_input("–§—Ä–∞–∑–∞ 2", key="manual_text2")

            if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä—É", key="manual_check"):
                if not text1 or not text2:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –æ–±–µ —Ñ—Ä–∞–∑—ã.")
                else:
                    t1 = preprocess_text(text1); t2 = preprocess_text(text2)
                    add_suggestions([t1, t2])
                    emb1 = encode_texts_in_batches(model_a, [t1], batch_size)
                    emb2 = encode_texts_in_batches(model_a, [t2], batch_size)
                    score_a = float(util.cos_sim(emb1[0], emb2[0]).item())
                    lex = jaccard_tokens(t1, t2)

                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–¥–µ–ª—å A)")
                    col1, col2, col3 = st.columns([1,1,1])
                    col1.metric("Score A", f"{score_a:.4f}")
                    col2.metric("Jaccard (lexical)", f"{lex:.4f}")

                    is_suspicious_single = False
                    if enable_detector and (score_a >= semantic_threshold) and (lex <= lexical_threshold):
                        is_suspicious_single = True
                        st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ù–ï–û–ß–ï–í–ò–î–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –≤—ã—Å–æ–∫–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å, –Ω–∏–∑–∫–∞—è –ª–µ–∫—Å–∏—á–µ—Å–∫–∞—è –ø–æ—Ö–æ–∂–µ—Å—Ç—å.")

                    if model_b is not None:
                        emb1b = encode_texts_in_batches(model_b, [t1], batch_size)
                        emb2b = encode_texts_in_batches(model_b, [t2], batch_size)
                        score_b = float(util.cos_sim(emb1b[0], emb2b[0]).item())
                        delta = score_b - score_a
                        col3.metric("Score B", f"{score_b:.4f}", delta=f"{delta:+.4f}")
                        comp_df = pd.DataFrame({"model": ["A","B"], "score":[score_a, score_b]})
                        chart = alt.Chart(comp_df).mark_bar().encode(
                            x=alt.X('model:N', title=None),
                            y=alt.Y('score:Q', scale=alt.Scale(domain=[0,1]), title="Cosine similarity score"),
                            tooltip=['model','score']
                        )
                        st.altair_chart(chart.properties(width=300), use_container_width=False)
                    else:
                        col3.write("")

                    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é", key="save_manual_single"):
                        rec = {
                            "source": "manual_single",
                            "pair": {"phrase_1": t1, "phrase_2": t2},
                            "score": score_a,
                            "score_b": float(score_b) if (model_b is not None) else None,
                            "lexical_score": lex,
                            "is_suspicious": is_suspicious_single,
                            "model_a": model_id,
                            "model_b": ab_model_id if enable_ab_test else None,
                            "timestamp": pd.Timestamp.now().isoformat()
                        }
                        add_to_history(rec)
                        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏.")

        with st.expander("–í–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä (–∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ). –§–æ—Ä–º–∞—Ç: `—Ñ—Ä–∞–∑–∞1 || —Ñ—Ä–∞–∑–∞2` / TAB / `,`"):
            bulk_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ –ø–∞—Ä—ã (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)", height=180, key="bulk_pairs")
            st.caption("–ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `||`.")
            if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–∞—Ä—ã (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)", key="manual_bulk_check"):
                lines = [l.strip() for l in bulk_text.splitlines() if l.strip()]
                if not lines:
                    st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ.")
                else:
                    parsed = []
                    for ln in lines:
                        if "||" in ln:
                            p1, p2 = ln.split("||", 1)
                        elif "\t" in ln:
                            p1, p2 = ln.split("\t", 1)
                        elif "," in ln:
                            p1, p2 = ln.split(",", 1)
                        else:
                            p1, p2 = ln, ""
                        parsed.append((preprocess_text(p1), preprocess_text(p2)))
                    parsed = [(a,b) for a,b in parsed if a and b]
                    if not parsed:
                        st.warning("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä.")
                    else:
                        add_suggestions([p for pair in parsed for p in pair])
                        phrases_all = list({p for pair in parsed for p in pair})
                        phrase2idx = {p:i for i,p in enumerate(phrases_all)}
                        with st.spinner("–ö–æ–¥–∏—Ä—É—é —Ñ—Ä–∞–∑—ã –º–æ–¥–µ–ª—å—é A..."):
                            embeddings_a = encode_texts_in_batches(model_a, phrases_all, batch_size)
                        embeddings_b = None
                        if model_b is not None:
                            with st.spinner("–ö–æ–¥–∏—Ä—É—é —Ñ—Ä–∞–∑—ã –º–æ–¥–µ–ª—å—é B..."):
                                embeddings_b = encode_texts_in_batches(model_b, phrases_all, batch_size)
                        rows = []
                        for p1, p2 in parsed:
                            emb1 = embeddings_a[phrase2idx[p1]]
                            emb2 = embeddings_a[phrase2idx[p2]]
                            score_a = float(util.cos_sim(emb1, emb2).item())
                            score_b = None
                            if embeddings_b is not None:
                                emb1b = embeddings_b[phrase2idx[p1]]
                                emb2b = embeddings_b[phrase2idx[p2]]
                                score_b = float(util.cos_sim(emb1b, emb2b).item())
                            lex = jaccard_tokens(p1, p2)
                            rows.append({"phrase_1": p1, "phrase_2": p2, "score": score_a, "score_b": score_b, "lexical_score": lex})
                        res_df = pd.DataFrame(rows)
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ä—É—á–Ω–æ–π –º–∞—Å—Å–æ–≤—ã–π –≤–≤–æ–¥)")
                        styled = style_suspicious_and_low(res_df, semantic_threshold, lexical_threshold, low_score_threshold)
                        st.dataframe(styled, use_container_width=True)
                        csv_bytes = res_df.to_csv(index=False).encode('utf-8')
                        st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã CSV", data=csv_bytes, file_name="manual_results.csv", mime="text/csv")

                        if enable_detector:
                            susp_df = res_df[(res_df["score"] >= semantic_threshold) & (res_df["lexical_score"] <= lexical_threshold)]
                            if not susp_df.empty:
                                st.markdown("### –ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (high semantic, low lexical)")
                                st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(susp_df)} –ø–∞—Ä.")
                                st.dataframe(susp_df, use_container_width=True)
                                susp_csv = susp_df.to_csv(index=False).encode('utf-8')
                                st.download_button("–°–∫–∞—á–∞—Ç—å suspicious CSV", data=susp_csv, file_name="suspicious_manual_bulk.csv", mime="text/csv")
                                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å suspicious –≤ –∏—Å—Ç–æ—Ä–∏—é", key="save_susp_manual"):
                                    rec = {
                                        "source": "manual_bulk_suspicious",
                                        "pairs_count": len(susp_df),
                                        "results": susp_df.to_dict(orient="records"),
                                        "model_a": model_id,
                                        "model_b": ab_model_id if enable_ab_test else None,
                                        "timestamp": pd.Timestamp.now().isoformat(),
                                        "semantic_threshold": semantic_threshold,
                                        "lexical_threshold": lexical_threshold
                                    }
                                    add_to_history(rec)
                                    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏.")

    # ===================== –ë–ª–æ–∫: —Ñ–∞–π–ª =====================
    if mode_text == "–§–∞–π–ª (CSV/XLSX/JSON)":
        st.header("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV, Excel –∏–ª–∏ JSON —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: phrase_1, phrase_2, topics (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª", type=["csv", "xlsx", "xls", "json", "ndjson"])

        if uploaded_file is not None:
            try:
                from utils import read_uploaded_file_bytes  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ —É—Ç—è–∂–µ–ª—è—Ç—å –≤–µ—Ä—Ö
                df, file_hash = read_uploaded_file_bytes(uploaded_file)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                st.stop()

            required_cols = {"phrase_1", "phrase_2"}
            if not required_cols.issubset(set(df.columns)):
                st.error(f"–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {required_cols}")
                st.stop()

            # --- –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
            st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π")
            st.caption("–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏).")
            edited_df = st.data_editor(df, num_rows="dynamic", use_container_width=True, key="dataset_editor")
            edited_csv = edited_df.to_csv(index=False).encode('utf-8')
            st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç (CSV)", data=edited_csv, file_name="edited_dataset.csv", mime="text/csv")
            df = edited_df.copy()

            # --- –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
            df["phrase_1"] = df["phrase_1"].map(preprocess_text)
            df["phrase_2"] = df["phrase_2"].map(preprocess_text)
            if "topics" in df.columns:
                df["topics_list"] = df["topics"].map(parse_topics_field)
            else:
                df["topics_list"] = [[] for _ in range(len(df))]

            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑–µ (–ø—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏)
            for col in ["phrase_1", "phrase_2"]:
                flags = df[col].map(simple_flags)
                df[f"{col}_len_tok"] = flags.map(lambda d: d["len_tok"])
                df[f"{col}_len_char"] = flags.map(lambda d: d["len_char"])
                df[f"{col}_has_neg"] = flags.map(lambda d: d["has_neg"])
                df[f"{col}_has_num"] = flags.map(lambda d: d["has_num"])
                df[f"{col}_has_date"] = flags.map(lambda d: d["has_date"])
                if _MORPH is not None:
                    df[f"{col}_pos1"] = df[col].map(pos_first_token)
                else:
                    df[f"{col}_pos1"] = "NA"

            add_suggestions(list(set(df["phrase_1"].tolist() + df["phrase_2"].tolist())))

            # --- –≠–Ω–∫–æ–¥–∏–Ω–≥
            phrases_all = list(set(df["phrase_1"].tolist() + df["phrase_2"].tolist()))
            phrase2idx = {p: i for i, p in enumerate(phrases_all)}
            with st.spinner("–ö–æ–¥–∏—Ä—É—é —Ñ—Ä–∞–∑—ã –º–æ–¥–µ–ª—å—é A..."):
                embeddings_a = encode_texts_in_batches(model_a, phrases_all, batch_size)
            embeddings_b = None
            if enable_ab_test and model_b is not None:
                with st.spinner("–ö–æ–¥–∏—Ä—É—é —Ñ—Ä–∞–∑—ã –º–æ–¥–µ–ª—å—é B..."):
                    embeddings_b = encode_texts_in_batches(model_b, phrases_all, batch_size)

            # --- –°—á—ë—Ç –º–µ—Ç—Ä–∏–∫ –Ω–∞ –ø–∞—Ä–∞—Ö
            scores, scores_b, lexical_scores = [], [], []
            for _, row in df.iterrows():
                p1, p2 = row["phrase_1"], row["phrase_2"]
                emb1_a, emb2_a = embeddings_a[phrase2idx[p1]], embeddings_a[phrase2idx[p2]]
                score_a = float(util.cos_sim(emb1_a, emb2_a).item())
                scores.append(score_a)
                if embeddings_b is not None:
                    emb1_b, emb2_b = embeddings_b[phrase2idx[p1]], embeddings_b[phrase2idx[p2]]
                    scores_b.append(float(util.cos_sim(emb1_b, emb2_b).item()))
                lex_score = jaccard_tokens(p1, p2)
                lexical_scores.append(lex_score)

            df["score"] = scores
            if embeddings_b is not None:
                df["score_b"] = scores_b
            df["lexical_score"] = lexical_scores

            # --- –ü–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–≤–∫–ª–∞–¥–∫–∏)
            st.subheader("2. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
            tabs = st.tabs(["–°–≤–æ–¥–∫–∞", "–†–∞–∑–≤–µ–¥–∫–∞ (Explore)", "–°—Ä–µ–∑—ã (Slices)", "A/B —Ç–µ—Å—Ç", "–≠–∫—Å–ø–æ—Ä—Ç"])

            # = Svodka =
            with tabs[0]:
                total = len(df)
                low_cnt = int((df["score"] < low_score_threshold).sum())
                susp_cnt = int(((df["score"] >= semantic_threshold) & (df["lexical_score"] <= lexical_threshold)).sum())
                colA, colB, colC, colD = st.columns(4)
                colA.metric("–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞", f"{total}")
                colB.metric("–°—Ä–µ–¥–Ω–∏–π score", f"{df['score'].mean():.4f}")
                colC.metric("–ú–µ–¥–∏–∞–Ω–∞ score", f"{df['score'].median():.4f}")
                colD.metric(f"–ù–∏–∑–∫–∏–µ (<{low_score_threshold:.2f})", f"{low_cnt} ({(low_cnt / max(total,1)):.0%})")
                st.caption(f"–ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (high-sem/low-lex): {susp_cnt} ({(susp_cnt / max(total,1)):.0%})")

            # = Explore =
            with tabs[1]:
                st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏")
                left, right = st.columns(2)
                with left:
                    chart = alt.Chart(pd.DataFrame({"score": df["score"]})).mark_bar().encode(
                        alt.X("score:Q", bin=alt.Bin(maxbins=30), title="Cosine similarity score"),
                        y='count()', tooltip=['count()']
                    ).interactive()
                    st.altair_chart(chart, use_container_width=True)
                with right:
                    chart_lex = alt.Chart(pd.DataFrame({"lexical_score": df["lexical_score"]})).mark_bar().encode(
                        alt.X("lexical_score:Q", bin=alt.Bin(maxbins=30), title="Jaccard (–ª–µ–∫—Å–∏–∫–∞)"),
                        y='count()', tooltip=['count()']
                    ).interactive()
                    st.altair_chart(chart_lex, use_container_width=True)

                st.markdown("##### –¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: —Å–µ–º–∞–Ω—Ç–∏–∫–∞ vs –ª–µ–∫—Å–∏–∫–∞")
                scatter_df = df[["score","lexical_score"]].copy()
                sc = alt.Chart(scatter_df).mark_point(opacity=0.6).encode(
                    x=alt.X("lexical_score:Q", title="Jaccard (–ª–µ–∫—Å–∏–∫–∞)"),
                    y=alt.Y("score:Q", title="Cosine similarity (—Å–µ–º–∞–Ω—Ç–∏–∫–∞)", scale=alt.Scale(domain=[0,1])),
                    tooltip=["score","lexical_score"]
                ).interactive()
                st.altair_chart(sc, use_container_width=True)

                if enable_detector:
                    st.markdown("##### –ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
                    susp_df = df[(df["score"] >= semantic_threshold) & (df["lexical_score"] <= lexical_threshold)]
                    if susp_df.empty:
                        st.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏.")
                    else:
                        st.write(f"–ü–∞—Ä: {len(susp_df)}")
                        st.dataframe(susp_df[["phrase_1","phrase_2","score","lexical_score"]], use_container_width=True)

            # = Slices =
            with tabs[2]:
                st.markdown("#### –°—Ä–µ–∑—ã –∫–∞—á–µ—Å—Ç–≤–∞")
                # –ø—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏
                df["_any_neg"] = df["phrase_1_has_neg"] | df["phrase_2_has_neg"]
                df["_any_num"] = df["phrase_1_has_num"] | df["phrase_2_has_num"]
                df["_any_date"] = df["phrase_1_has_date"] | df["phrase_2_has_date"]
                # –¥–ª–∏–Ω–∞ (–ø–æ —Å—É–º–º–µ —Ç–æ–∫–µ–Ω–æ–≤ –æ–±–µ–∏—Ö —Ñ—Ä–∞–∑)
                def _len_bucket(r):
                    n = int(r["phrase_1_len_tok"] + r["phrase_2_len_tok"])
                    if n <= 4: return "[0,4]"
                    if n <= 9: return "[5,9]"
                    if n <= 19: return "[10,19]"
                    return "[20,+)"
                df["_len_bucket"] = df.apply(_len_bucket, axis=1)

                cols1 = st.columns(3)
                with cols1[0]:
                    st.markdown("**–ü–æ –¥–ª–∏–Ω–µ**")
                    agg_len = df.groupby("_len_bucket")["score"].agg(["count","mean","median"]).reset_index().sort_values("_len_bucket")
                    st.dataframe(agg_len, use_container_width=True)
                with cols1[1]:
                    st.markdown("**–û—Ç—Ä–∏—Ü–∞–Ω–∏—è/–ß–∏—Å–ª–∞/–î–∞—Ç—ã**")
                    flags_view = []
                    for flag in ["_any_neg","_any_num","_any_date"]:
                        sub = df[df[flag]]
                        flags_view.append({"—Ñ–ª–∞–≥":flag, "count":len(sub), "mean":float(sub["score"].mean()) if len(sub)>0 else np.nan})
                    st.dataframe(pd.DataFrame(flags_view), use_container_width=True)
                with cols1[2]:
                    if _MORPH is None:
                        st.info("–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è (POS) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω pymorphy2")
                    else:
                        st.markdown("**POS –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞**")
                        pos_agg = df.groupby("phrase_1_pos1")["score"].agg(["count","mean"]).reset_index().rename(columns={"phrase_1_pos1":"POS"})
                        st.dataframe(pos_agg.sort_values("count", ascending=False), use_container_width=True)

                topic_mode = st.checkbox("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ topics", value=("topics_list" in df.columns))
                if topic_mode:
                    st.markdown("**–ü–æ —Ç–µ–º–∞–º (topics)**")
                    exploded = df.explode("topics_list")
                    exploded["topics_list"] = exploded["topics_list"].fillna("")
                    exploded = exploded[exploded["topics_list"].astype(str)!=""]
                    if exploded.empty:
                        st.info("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –Ω–µ–ø—É—Å—Ç—ã—Ö topics.")
                    else:
                        top_agg = exploded.groupby("topics_list")["score"].agg(["count","mean","median"]).reset_index().sort_values("count", ascending=False)
                        st.dataframe(top_agg, use_container_width=True)

            # = AB test =
            with tabs[3]:
                if (not enable_ab_test) or ("score_b" not in df.columns):
                    st.info("A/B —Ç–µ—Å—Ç –æ—Ç–∫–ª—é—á—ë–Ω –∏–ª–∏ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ score_b.")
                else:
                    st.markdown("#### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π A vs B")
                    colx, coly, colz = st.columns(3)
                    colx.metric("–°—Ä–µ–¥–Ω–∏–π A", f"{df['score'].mean():.4f}")
                    coly.metric("–°—Ä–µ–¥–Ω–∏–π B", f"{df['score_b'].mean():.4f}")
                    colz.metric("Œî (B - A)", f"{(df['score_b'].mean()-df['score'].mean()):+.4f}")

                    n_boot = st.slider("–ë—É—Ç—Å—Ç—Ä—ç–ø –∏—Ç–µ—Ä–∞—Ü–∏–π", 200, 2000, 500, 100)
                    mean_diff, low, high = bootstrap_diff_ci(df["score_b"].to_numpy(), df["score"].to_numpy(), n_boot=n_boot)
                    st.write(f"–î–ò (95%) –¥–ª—è Œî (B‚àíA): **[{low:+.4f}, {high:+.4f}]**, —Å—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞: **{mean_diff:+.4f}**")
                    ab_df = pd.DataFrame({"A": df["score"], "B": df["score_b"]})
                    ab_chart = alt.Chart(ab_df.reset_index()).mark_point(opacity=0.5).encode(
                        x=alt.X("A:Q", scale=alt.Scale(domain=[0,1])),
                        y=alt.Y("B:Q", scale=alt.Scale(domain=[0,1])),
                        tooltip=["A","B"]
                    ).interactive()
                    st.altair_chart(ab_chart, use_container_width=True)

                    delta_df = df.copy()
                    delta_df["delta"] = delta_df["score_b"] - delta_df["score"]
                    st.markdown("**–¢–æ–ø, –≥–¥–µ B ‚â´ A**")
                    st.dataframe(
                        delta_df.sort_values("delta", ascending=False).head(10)[["phrase_1","phrase_2","score","score_b","delta"]],
                        use_container_width=True
                    )
                    st.markdown("**–¢–æ–ø, –≥–¥–µ A ‚â´ B**")
                    st.dataframe(
                        delta_df.sort_values("delta", ascending=True).head(10)[["phrase_1","phrase_2","score","score_b","delta"]],
                        use_container_width=True
                    )

            # = Export =
            with tabs[4]:
                st.markdown("#### –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ (JSON)")
                report = {
                    "file_name": uploaded_file.name,
                    "file_hash": file_hash,
                    "n_pairs": int(len(df)),
                    "model_a": model_id,
                    "model_b": ab_model_id if enable_ab_test else None,
                    "thresholds": {
                        "semantic_threshold": float(semantic_threshold),
                        "lexical_threshold": float(lexical_threshold),
                        "low_score_threshold": float(low_score_threshold)
                    },
                    "summary": {
                        "mean_score": float(df["score"].mean()),
                        "median_score": float(df["score"].median()),
                        "low_count": int((df["score"] < low_score_threshold).sum()),
                        "suspicious_count": int(((df["score"] >= semantic_threshold) & (df["lexical_score"] <= lexical_threshold)).sum())
                    }
                }
                rep_bytes = json.dumps(report, ensure_ascii=False, indent=2).encode("utf-8")
                st.download_button("üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç JSON", data=rep_bytes, file_name="synonym_checker_report.json", mime="application/json")

            # --- –í—ã–≥—Ä—É–∑–∫–∞ + –ø–æ–¥—Å–≤–µ—Ç–∫–∞
            st.subheader("3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–≥—Ä—É–∑–∫–∞")
            result_csv = df.to_csv(index=False).encode('utf-8')
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã CSV", data=result_csv, file_name="results.csv", mime="text/csv")
            styled_df = style_suspicious_and_low(df, semantic_threshold, lexical_threshold, low_score_threshold)
            st.dataframe(styled_df, use_container_width=True)

            # --- Suspicious –±–ª–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏—è
            if enable_detector:
                susp_df = df[(df["score"] >= semantic_threshold) & (df["lexical_score"] <= lexical_threshold)]
                st.markdown("### –ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (high semantic, low lexical)")
                if susp_df.empty:
                    st.write("–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")
                else:
                    st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(susp_df)} –ø–∞—Ä.")
                    st.dataframe(susp_df, use_container_width=True)
                    susp_csv = susp_df.to_csv(index=False).encode('utf-8')
                    st.download_button("–°–∫–∞—á–∞—Ç—å suspicious CSV", data=susp_csv, file_name="suspicious_file_mode.csv", mime="text/csv")
                    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å suspicious –≤ –∏—Å—Ç–æ—Ä–∏—é", key="save_susp_file"):
                        rec = {
                            "source": "file_suspicious",
                            "file_hash": file_hash,
                            "file_name": uploaded_file.name,
                            "pairs_count": len(susp_df),
                            "results": susp_df.to_dict(orient="records"),
                            "model_a": model_id,
                            "model_b": ab_model_id if enable_ab_test else None,
                            "timestamp": pd.Timestamp.now().isoformat(),
                            "semantic_threshold": semantic_threshold,
                            "lexical_threshold": lexical_threshold
                        }
                        add_to_history(rec)
                        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏.")
        else:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")

    # ===================== –ò—Å—Ç–æ—Ä–∏—è –≤–Ω–∏–∑—É =====================
    if st.session_state["history"]:
        st.header("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫")
        for idx, rec in enumerate(reversed(st.session_state["history"])):
            st.markdown(f"### –ü—Ä–æ–≤–µ—Ä–∫–∞ #{len(st.session_state['history']) - idx}")
            if rec.get("source") == "manual_single":
                p = rec.get("pair", {})
                st.markdown(f"**–†—É—á–Ω–æ–π –≤–≤–æ–¥ (single)**  |  **–î–∞—Ç–∞:** {rec.get('timestamp','-')}")
                st.markdown(f"**–§—Ä–∞–∑—ã:** `{p.get('phrase_1','')}`  ‚Äî `{p.get('phrase_2','')}`")
                st.markdown(f"**Score A:** {rec.get('score', '-')}, **Score B:** {rec.get('score_b', '-')}, **Lexical:** {rec.get('lexical_score','-')}")
                if rec.get("is_suspicious"):
                    st.warning("–≠—Ç–∞ –ø–∞—Ä–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–æ—á–µ–≤–∏–¥–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (high semantic, low lexical).")
            elif rec.get("source") == "manual_bulk":
                st.markdown(f"**–†—É—á–Ω–æ–π –≤–≤–æ–¥ (bulk)**  |  **–î–∞—Ç–∞:** {rec.get('timestamp','-')}")
                st.markdown(f"**–ü–∞—Ä:** {rec.get("pairs_count", 0)}  |  **–ú–æ–¥–µ–ª—å A:** {rec.get('model_a','-')}")
                saved_df = pd.DataFrame(rec.get("results", []))
                if not saved_df.empty:
                    styled_hist_df = style_suspicious_and_low(saved_df, rec.get("semantic_threshold", 0.8), rec.get("lexical_threshold", 0.3), 0.75)
                    st.dataframe(styled_hist_df, use_container_width=True)
            elif rec.get("source") in ("manual_bulk_suspicious",):
                st.markdown(f"**–†—É—á–Ω–æ–π suspicious**  |  **–î–∞—Ç–∞:** {rec.get('timestamp','-')}")
                st.markdown(f"**–ü–∞—Ä:** {rec.get("pairs_count", 0)}  |  **–ú–æ–¥–µ–ª—å A:** {rec.get('model_a','-')}")
                saved_df = pd.DataFrame(rec.get("results", []))
                if not saved_df.empty:
                    st.dataframe(saved_df, use_container_width=True)
            elif rec.get("source") == "file_suspicious":
                st.markdown(f"**–§–∞–π–ª (suspicious)**  |  **–§–∞–π–ª:** {rec.get('file_name','-')}  |  **–î–∞—Ç–∞:** {rec.get('timestamp','-')}")
                st.markdown(f"**–ü–∞—Ä:** {rec.get("pairs_count", 0)}  |  **–ú–æ–¥–µ–ª—å A:** {rec.get('model_a','-')}")
                saved_df = pd.DataFrame(rec.get("results", []))
                if not saved_df.empty:
                    st.dataframe(saved_df, use_container_width=True)
            else:
                st.markdown(f"**–§–∞–π–ª:** {rec.get('file_name','-')}  |  **–î–∞—Ç–∞:** {rec.get('timestamp','-')}")
                st.markdown(f"**–ú–æ–¥–µ–ª—å A:** {rec.get('model_a','-')}  |  **–ú–æ–¥–µ–ª—å B:** {rec.get('model_b','-')}")
                saved_df = pd.DataFrame(rec.get("results", []))
                if not saved_df.empty:
                    styled_hist_df = style_suspicious_and_low(saved_df, 0.8, 0.3, 0.75)
                    st.dataframe(styled_hist_df, use_container_width=True)
            st.markdown("---")

# ===================== –†–ï–ñ–ò–ú: –ú–£–õ–¨–¢–ò–ú–û–î–ê–õ–¨–ù–´–ï –ú–û–î–ï–õ–ò =====================
elif mode == "–†–∞–±–æ—Ç–∞ —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏":
    st.header("üñºÔ∏è –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")

    # ===================== –ò—Å—Ç–æ—Ä–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª–∞ =====================
    if "mm_history" not in st.session_state:
        st.session_state["mm_history"] = []

    def add_mm_history(record: dict):
        st.session_state["mm_history"].append(record)
        if len(st.session_state["mm_history"]) > 300:
            st.session_state["mm_history"] = st.session_state["mm_history"][-300:]

    st.sidebar.header("–ò—Å—Ç–æ—Ä–∏—è (–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ)")
    if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª–∞"):
        st.session_state["mm_history"] = []
    if st.session_state["mm_history"]:
        import json

        def safe_json_dumps(obj) -> str:
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤—Å—ë, —á—Ç–æ –Ω–µ json-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ ‚Üí str"""
            def convert(o):
                if isinstance(o, (str, int, float, bool)) or o is None:
                    return o
                if isinstance(o, dict):
                    return {k: convert(v) for k, v in o.items()}
                if isinstance(o, (list, tuple, set)):
                    return [convert(v) for v in o]
                return str(o)

            return json.dumps(convert(obj), indent=2, ensure_ascii=False)

        mm_bytes = safe_json_dumps(st.session_state["mm_history"]).encode("utf-8")

        st.sidebar.download_button(
            "–°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (JSON)",
            data=mm_bytes,
            file_name="mm_history.json",
            mime="application/json"
        )
    else:
        st.sidebar.caption("–ò—Å—Ç–æ—Ä–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª–∞ –ø—É—Å—Ç–∞")

    # ===================== –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π =====================
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

    # CLIP (A)
    clip_source = st.sidebar.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ CLIP (A)", ["huggingface", "google_drive"], index=0, key="clip_source_a")
    clip_id = st.sidebar.text_input("CLIP (A) Model ID / GDrive File ID", value="openai/clip-vit-base-patch32", key="clip_id_a")

    # BLIP
    blip_source = st.sidebar.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ BLIP", ["huggingface", "google_drive"], index=0, key="blip_source")
    blip_id = st.sidebar.text_input("BLIP Model ID / GDrive File ID", value="Salesforce/blip-image-captioning-base", key="blip_id")

    # A/B —Ç–µ—Å—Ç –¥–ª—è CLIP
    enable_mm_ab = st.sidebar.checkbox("A/B —Ç–µ—Å—Ç: –≤—Ç–æ—Ä–∞—è CLIP –º–æ–¥–µ–ª—å (B)", value=False)
    if enable_mm_ab:
        clip_source_b = st.sidebar.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ CLIP (B)", ["huggingface", "google_drive"], index=0, key="clip_source_b")
        clip_id_b = st.sidebar.text_input("CLIP (B) Model ID / GDrive File ID", value="laion/CLIP-ViT-B-32-laion2B-s34B-b79K", key="clip_id_b")
    else:
        clip_source_b, clip_id_b = None, None

    from multimodal import load_blip_model, load_clip_model, check_text_image_pair, generate_caption
    from utils import bootstrap_diff_ci
    from PIL import Image
    import pandas as pd
    import numpy as np
    import json
    import torch
    import io, zipfile
    import altair as alt

    try:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é CLIP (A)..."):
            clip_model_a, clip_proc_a = load_clip_model(clip_source, clip_id)
        st.sidebar.success("CLIP (A) –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CLIP (A): {e}")
        st.stop()

    clip_model_b, clip_proc_b = None, None
    if enable_mm_ab and clip_id_b:
        try:
            with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é CLIP (B)..."):
                clip_model_b, clip_proc_b = load_clip_model(clip_source_b, clip_id_b)
            st.sidebar.success("CLIP (B) –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CLIP (B): {e}")
            st.stop()

    try:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞—é BLIP..."):
            blip_model_u, blip_proc_u = load_blip_model(blip_source, blip_id)
        st.sidebar.success("BLIP –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ BLIP: {e}")
        st.stop()

    # ===================== BLIP Caption =====================
    with st.expander("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (BLIP)"):
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ BLIP –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")

        uploaded_blip = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏", type=["jpg","jpeg","png"], key="blip_img")

        if uploaded_blip:
            img = Image.open(uploaded_blip).convert("RGB")
            st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

            if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", key="blip_caption_btn"):
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è..."):
                    caption = generate_caption(blip_model_u, blip_proc_u, img)
                st.success(f"BLIP Caption: **{caption}**")
                add_mm_history({
                    "type": "blip_caption",
                    "filename": getattr(uploaded_blip, "name", ""),
                    "caption": caption,
                    "timestamp": pd.Timestamp.now().isoformat()
                })

    # ===================== CLIP + BLIP —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ =====================
    with st.expander("ü§ù –°—Ü–µ–Ω–∞—Ä–∏–π: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ BLIP-–æ–ø–∏—Å–∞–Ω–∏—è"):
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ BLIP –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ –µ–≥–æ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ CLIP.")

        uploaded_joint = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É", type=["jpg","jpeg","png"], key="joint_img")
        user_text = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", key="joint_text")

        if uploaded_joint:
            img = Image.open(uploaded_joint).convert("RGB")
            st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)

            if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏ BLIP-–æ–ø–∏—Å–∞–Ω–∏–µ", key="joint_btn"):
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è BLIP..."):
                    blip_caption = generate_caption(blip_model_u, blip_proc_u, img)

                with st.spinner("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CLIP..."):
                    score_user = check_text_image_pair(clip_model_a, clip_proc_a, user_text, img) if user_text else None
                    score_blip = check_text_image_pair(clip_model_a, clip_proc_a, blip_caption, img)

                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                st.markdown(f"**BLIP Caption:** {blip_caption}")
                st.metric("CLIP score (BLIP caption ‚Üî image)", f"{score_blip:.4f}")

                rec = {
                    "type": "clip_compare",
                    "filename": getattr(uploaded_joint, "name", ""),
                    "blip_caption": blip_caption,
                    "score_blip": float(score_blip),
                    "user_text": user_text if user_text else None,
                    "score_user": float(score_user) if score_user is not None else None,
                    "timestamp": pd.Timestamp.now().isoformat(),
                    "clip_model_a": clip_id,
                    "blip_model": blip_id
                }

                if score_user is not None:
                    delta = score_user - score_blip
                    st.metric("CLIP score (–≤–∞—à —Ç–µ–∫—Å—Ç ‚Üî image)", f"{score_user:.4f}", delta=f"{delta:+.4f}")
                    if score_user > score_blip:
                        st.success("‚úÖ –í–∞—à —Ç–µ–∫—Å—Ç –ª—É—á—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–µ, —á–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è BLIP!")
                    else:
                        st.info("‚ÑπÔ∏è BLIP-–æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –±–ª–∏–∂–µ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ, —á–µ–º –≤–∞—à —Ç–µ–∫—Å—Ç.")

                add_mm_history(rec)

    # ===================== –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: CLIP Retrieval =====================
    def _recall_at_k(sim_matrix: np.ndarray, k: int) -> float:
        n = sim_matrix.shape[0]
        ranks = np.argsort(-sim_matrix, axis=1)
        hits = sum([1 if i in ranks[i, :k] else 0 for i in range(n)])
        return hits / max(n, 1)

    def _cosine_sim(a: np.ndarray, b: np.ndarray) -> np.ndarray:
        a = a / (np.linalg.norm(a, axis=1, keepdims=True) + 1e-12)
        b = b / (np.linalg.norm(b, axis=1, keepdims=True) + 1e-12)
        return a @ b.T

    with st.expander("üì¶ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: CLIP Retrieval (text‚Üîimage)"):
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (`text,image`) –∏ ZIP —Å —Ñ–∞–π–ª–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ CSV `image` –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –≤ ZIP.")

        csv_file = st.file_uploader("CSV —Å –ø–∞—Ä–∞–º–∏ (text,image)", type=["csv"], key="mm_clip_csv")
        zip_file = st.file_uploader("ZIP —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", type=["zip"], key="mm_clip_zip")

        if csv_file and zip_file:
            df_pairs = pd.read_csv(csv_file)
            if not {"text", "image"}.issubset(df_pairs.columns):
                st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: text, image")
            else:
                zbytes = io.BytesIO(zip_file.read())
                with zipfile.ZipFile(zbytes) as zf:
                    names = set(zf.namelist())

                    imgs, ok_rows = [], []
                    for idx, row in df_pairs.iterrows():
                        fname = str(row["image"])
                        if fname in names:
                            with zf.open(fname) as f:
                                img = Image.open(io.BytesIO(f.read())).convert("RGB")
                            imgs.append(img)
                            ok_rows.append(idx)
                        else:
                            st.warning(f"–ù–µ—Ç —Ñ–∞–π–ª–∞ –≤ ZIP: {fname}")

                    if imgs:
                        df_eval = df_pairs.loc[ok_rows].reset_index(drop=True)
                        texts = df_eval["text"].astype(str).tolist()

                        with st.spinner("–ö–æ–¥–∏—Ä—É—é —Ç–µ–∫—Å—Ç—ã (CLIP A)..."):
                            inputs_t = clip_proc_a(text=texts, return_tensors="pt", padding=True, truncation=True)
                            with torch.no_grad():
                                t_emb_a = clip_model_a.get_text_features(**inputs_t).cpu().numpy()

                        with st.spinner("–ö–æ–¥–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (CLIP A)..."):
                            inputs_i = clip_proc_a(images=imgs, return_tensors="pt")
                            with torch.no_grad():
                                i_emb_a = clip_model_a.get_image_features(**inputs_i).cpu().numpy()

                        sim_a = _cosine_sim(t_emb_a, i_emb_a)

                        r1 = _recall_at_k(sim_a, 1)
                        r5 = _recall_at_k(sim_a, 5) if sim_a.shape[1] >= 5 else np.nan
                        r10 = _recall_at_k(sim_a, 10) if sim_a.shape[1] >= 10 else np.nan

                        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ (CLIP A)")
                        c1, c2, c3 = st.columns(3)
                        c1.metric("Recall@1", f"{r1:.3f}")
                        c2.metric("Recall@5", f"{r5:.3f}" if not np.isnan(r5) else "‚Äî")
                        c3.metric("Recall@10", f"{r10:.3f}" if not np.isnan(r10) else "‚Äî")

                        best_scores = sim_a.max(axis=1)
                        chart = alt.Chart(pd.DataFrame({"best_score": best_scores})).mark_bar().encode(
                            alt.X("best_score:Q", bin=alt.Bin(maxbins=30), title="–õ—É—á—à–∏–π score –ø–æ —Å—Ç—Ä–æ–∫–µ (text‚Üíimage)"),
                            y='count()', tooltip=['count()']
                        ).interactive()
                        st.altair_chart(chart, use_container_width=True)

                        # A/B —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                        if clip_model_b is not None:
                            with st.spinner("–ö–æ–¥–∏—Ä—É—é —Ç–µ–∫—Å—Ç—ã (CLIP B)..."):
                                inputs_t_b = clip_proc_b(text=texts, return_tensors="pt", padding=True, truncation=True)
                                with torch.no_grad():
                                    t_emb_b = clip_model_b.get_text_features(**inputs_t_b).cpu().numpy()
                            with st.spinner("–ö–æ–¥–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (CLIP B)..."):
                                inputs_i_b = clip_proc_b(images=imgs, return_tensors="pt")
                                with torch.no_grad():
                                    i_emb_b = clip_model_b.get_image_features(**inputs_i_b).cpu().numpy()
                            sim_b = _cosine_sim(t_emb_b, i_emb_b)

                            r1_b = _recall_at_k(sim_b, 1)
                            r5_b = _recall_at_k(sim_b, 5) if sim_b.shape[1] >= 5 else np.nan
                            r10_b = _recall_at_k(sim_b, 10) if sim_b.shape[1] >= 10 else np.nan

                            st.subheader("A/B —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (B –ø—Ä–æ—Ç–∏–≤ A)")
                            d1, d2, d3 = st.columns(3)
                            d1.metric("Œî Recall@1", f"{(r1_b - r1):+.3f}")
                            d2.metric("Œî Recall@5", f"{(r5_b - r5):+.3f}" if not (np.isnan(r5) or np.isnan(r5_b)) else "‚Äî")
                            d3.metric("Œî Recall@10", f"{(r10_b - r10):+.3f}" if not (np.isnan(r10) or np.isnan(r10_b)) else "‚Äî")

                            mean_diff, low, high = bootstrap_diff_ci(sim_b.max(axis=1), sim_a.max(axis=1), n_boot=500)
                            st.caption(f"–ë—É—Ç—Å—Ç—Ä—ç–ø –î–ò (95%) –¥–ª—è Œî best_score (B‚àíA): [{low:+.4f}, {high:+.4f}], —Å—Ä–µ–¥–Ω—è—è: {mean_diff:+.4f}")

    # ===================== –ê–Ω–∞–ª–∏–∑ BLIP Caption (BLEU / ROUGE) =====================
    def _ngrams(tokens: list, n: int) -> set:
        return set(tuple(tokens[i:i+n]) for i in range(len(tokens)-n+1))

    def _bleu(ref: str, hyp: str, n: int = 4) -> float:
        ref_tokens = ref.lower().split()
        hyp_tokens = hyp.lower().split()
        score = 0.0
        for i in range(1, n+1):
            ref_ngr = _ngrams(ref_tokens, i)
            hyp_ngr = _ngrams(hyp_tokens, i)
            inter = len(ref_ngr & hyp_ngr)
            total = max(len(hyp_ngr), 1)
            score += inter / total
        return score / n

    def _rouge_l(ref: str, hyp: str) -> float:
        ref_tokens = ref.lower().split()
        hyp_tokens = hyp.lower().split()
        dp = [[0]*(len(hyp_tokens)+1) for _ in range(len(ref_tokens)+1)]
        for i in range(1, len(ref_tokens)+1):
            for j in range(1, len(hyp_tokens)+1):
                if ref_tokens[i-1] == hyp_tokens[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
        lcs = dp[-1][-1]
        return lcs / max(len(ref_tokens), 1)

    with st.expander("üìä –ê–Ω–∞–ª–∏–∑ BLIP Caption –ø—Ä–æ—Ç–∏–≤ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π"):
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: `image`, `reference_caption`. ZIP —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. BLIP —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∏, –∞ –∑–∞—Ç–µ–º —Å—Ä–∞–≤–Ω–∏—Ç —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ BLEU –∏ ROUGE-L.")

        csv_blip = st.file_uploader("CSV (image, reference_caption)", type=["csv"], key="blip_eval_csv")
        zip_blip = st.file_uploader("ZIP —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏", type=["zip"], key="blip_eval_zip")

        if csv_blip and zip_blip:
            df_ref = pd.read_csv(csv_blip)
            if not {"image", "reference_caption"}.issubset(df_ref.columns):
                st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: image, reference_caption")
            else:
                zbytes = io.BytesIO(zip_blip.read())
                with zipfile.ZipFile(zbytes) as zf:
                    names = set(zf.namelist())
                    refs, hyps, bleus, rouges = [], [], [], []

                    for idx, row in df_ref.iterrows():
                        fname = str(row["image"])
                        ref_caption = str(row["reference_caption"])
                        if fname not in names:
                            st.warning(f"–ù–µ—Ç —Ñ–∞–π–ª–∞ –≤ ZIP: {fname}")
                            continue
                        with zf.open(fname) as f:
                            img = Image.open(io.BytesIO(f.read())).convert("RGB")

                        with torch.no_grad():
                            hyp_caption = generate_caption(blip_model_u, blip_proc_u, img)

                        bleu_score = _bleu(ref_caption, hyp_caption)
                        rouge_score = _rouge_l(ref_caption, hyp_caption)

                        refs.append(ref_caption)
                        hyps.append(hyp_caption)
                        bleus.append(bleu_score)
                        rouges.append(rouge_score)

                    if bleus:
                        df_eval = pd.DataFrame({
                            "image": df_ref["image"].iloc[:len(bleus)],
                            "reference": refs,
                            "hypothesis": hyps,
                            "BLEU": bleus,
                            "ROUGE-L": rouges
                        })

                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã BLEU / ROUGE-L")
                        st.dataframe(df_eval)

                        c1, c2 = st.columns(2)
                        c1.metric("–°—Ä–µ–¥–Ω–∏–π BLEU", f"{np.mean(bleus):.3f}")
                        c2.metric("–°—Ä–µ–¥–Ω–∏–π ROUGE-L", f"{np.mean(rouges):.3f}")

                        st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BLEU**")
                        chart_bleu = alt.Chart(pd.DataFrame({"BLEU": bleus})).mark_bar().encode(
                            alt.X("BLEU:Q", bin=alt.Bin(maxbins=30)),
                            y='count()', tooltip=['count()']
                        ).interactive()
                        st.altair_chart(chart_bleu, use_container_width=True)

                        st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ROUGE-L**")
                        chart_rouge = alt.Chart(pd.DataFrame({"ROUGE-L": rouges})).mark_bar().encode(
                            alt.X("ROUGE-L:Q", bin=alt.Bin(maxbins=30)),
                            y='count()', tooltip=['count()']
                        ).interactive()
                        st.altair_chart(chart_rouge, use_container_width=True)

                        mm_bytes_eval = df_eval.to_csv(index=False).encode("utf-8")
                        st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", data=mm_bytes_eval, file_name="blip_eval_results.csv", mime="text/csv")
